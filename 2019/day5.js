var toIntList = str => str.split(',').map(s => parseInt(s,10));
var list = toIntList(data());

function getIns(op) {
    var str = Array(5 - (op+'').length).fill('0').join('') + op;
    var m = str.match(/(\d)(\d)(\d)(\d+)/);
    return {op:parseInt(m[4]), m1: m[3] !== '0', m2: m[2] !== '0', m3: m[1] !== '0'}
}

function program1(input, output = [], pos = 0) {
    let [ins, p1, p2, p3] = list.slice(pos);
    let { op, m1, m2, m3 } = getIns(ins);
    let delta = (op == 3 || op === 4) ? 2 : 4;
    let v1 = m1? p1 : list[p1];
    let v2 = m2? p2 : list[p2];
    if(op === 1) list[p3] = v1 + v2;
    if(op === 2) list[p3] = v1 * v2;
    if(op === 3) list[p1] = input;
    if(op === 4) output.push(v1);
    if(op === 99) return output;
    return program1(input, output, pos+delta);
}

console.log('=== part1 ====');
console.log(program1(1));


console.log('==== part 2 ====');
const program2 = (str, input) => {
    const list2 = toIntList(str);
    const prg = (input, output = [], pos = 0) => {
        let [ins, p1, p2, p3] = list2.slice(pos);
        let { op, m1, m2, m3 } = getIns(ins);
        let delta = 4;
        if(op == 3 || op === 4) delta = 2;
        if(op == 5 || op === 6) delta = 3;
        let v1 = m1? p1 : list2[p1];
        let v2 = m2? p2 : list2[p2];
        if(op === 1) list2[p3] = v1 + v2;
        if(op === 2) list2[p3] = v1 * v2;
        if(op === 3) list2[p1] = input;
        if(op === 4) output.push(v1);
        if(op === 5 && v1 != 0) delta = v2 - pos;
        if(op === 6 && v1 == 0) delta = v2 - pos;
        if(op === 7) list2[p3] = (v1 < v2)? 1 : 0;
        if(op === 8) list2[p3] = (v1 == v2)? 1 : 0;
        if(op === 99) return output;
        return prg(input, output, pos+delta);
    }
    return prg(input);
}

/*
const testData = [
    ['3,9,8,9,10,9,4,9,99,-1,8', 8, 1],
    ['3,9,8,9,10,9,4,9,99,-1,8', 9, 0],
    ['3,9,8,9,10,9,4,9,99,-1,8', 7, 0],
    ['3,9,7,9,10,9,4,9,99,-1,8', 7, 1],
    ['3,9,7,9,10,9,4,9,99,-1,8', 8, 0],
    ['3,3,1108,-1,8,3,4,3,99', 8, 1],
    ['3,3,1108,-1,8,3,4,3,99', 7, 0],
    ['3,3,1107,-1,8,3,4,3,99', 7, 1],
    ['3,3,1107,-1,8,3,4,3,99', 8, 0],
    ['3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9', 1, 1],
    ['3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9', 0, 0],
    ['3,12,6,12,15,1,13,14,13,4,13,99,-1,0,1,9', -1, 1],
    ['3,3,1105,-1,9,1101,0,0,12,4,12,99,1', 1, 1],
    ['3,3,1105,-1,9,1101,0,0,12,4,12,99,1', 0, 0],
    ['3,3,1105,-1,9,1101,0,0,12,4,12,99,1', -1, 1],
    ['3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99', 
      7, 999
    ],
    ['3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99', 
      8, 1000
    ],
    ['3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99', 
      9, 1001 
    ],
];

testData.forEach(([str, input, expect], i) => {
    console.log(`${i}: ${program2(str, input)[0] === expect}`)
});
*/

console.log(program2(data(), 5));


function data(){
    return `3,225,1,225,6,6,1100,1,238,225,104,0,1102,88,66,225,101,8,125,224,101,-88,224,224,4,224,1002,223,8,223,101,2,224,224,1,224,223,223,1101,87,23,225,1102,17,10,224,101,-170,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,9,65,225,1101,57,74,225,1101,66,73,225,1101,22,37,224,101,-59,224,224,4,224,102,8,223,223,1001,224,1,224,1,223,224,223,1102,79,64,225,1001,130,82,224,101,-113,224,224,4,224,102,8,223,223,1001,224,7,224,1,223,224,223,1102,80,17,225,1101,32,31,225,1,65,40,224,1001,224,-32,224,4,224,102,8,223,223,1001,224,4,224,1,224,223,223,2,99,69,224,1001,224,-4503,224,4,224,102,8,223,223,101,6,224,224,1,223,224,223,1002,14,92,224,1001,224,-6072,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,102,33,74,224,1001,224,-2409,224,4,224,1002,223,8,223,101,7,224,224,1,223,224,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,677,677,224,1002,223,2,223,1006,224,329,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,344,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,359,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,374,1001,223,1,223,8,677,226,224,1002,223,2,223,1006,224,389,101,1,223,223,1108,677,677,224,1002,223,2,223,1005,224,404,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,419,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,434,101,1,223,223,107,226,226,224,102,2,223,223,1005,224,449,101,1,223,223,107,677,226,224,1002,223,2,223,1006,224,464,1001,223,1,223,8,226,677,224,102,2,223,223,1006,224,479,1001,223,1,223,108,677,226,224,102,2,223,223,1005,224,494,1001,223,1,223,1108,677,226,224,1002,223,2,223,1005,224,509,1001,223,1,223,1107,677,226,224,1002,223,2,223,1005,224,524,101,1,223,223,1008,226,226,224,1002,223,2,223,1006,224,539,101,1,223,223,1008,226,677,224,1002,223,2,223,1005,224,554,1001,223,1,223,7,226,677,224,1002,223,2,223,1005,224,569,101,1,223,223,1007,677,226,224,1002,223,2,223,1006,224,584,1001,223,1,223,7,677,226,224,102,2,223,223,1006,224,599,101,1,223,223,1007,226,226,224,102,2,223,223,1006,224,614,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,629,101,1,223,223,108,226,226,224,102,2,223,223,1006,224,644,101,1,223,223,1108,226,677,224,1002,223,2,223,1005,224,659,101,1,223,223,8,226,226,224,1002,223,2,223,1005,224,674,101,1,223,223,4,223,99,226`;
}

